theme_tufte() +
scale_color_ptol() +
guides(color = guide_legend(title = "Is Geographical"))
projection
prop.lda
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
projection
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
projection %>%
mutate(IsGeo = data_scaled$IsGeo) %>%
ggplot(aes(x = LD1, fill = IsGeo)) +
geom_histogram() +
geom_point(aes(x = LD1, y = 0)) +
theme_tufte() +
scale_fill_ptol() +
scale_color_ptol()
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
projection %>%
mutate(IsGeo = data_scaled$IsGeo) %>%
ggplot(aes(x = LD1, fill = IsGeo)) +
geom_histogram(alpha = 0.4) +
geom_rug(aes(x = LD1)) +
theme_tufte() +
scale_fill_ptol() +
scale_color_ptol()
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
projection %>%
mutate(IsGeo = data_scaled$IsGeo) %>%
ggplot(aes(x = LD1, fill = IsGeo)) +
geom_histogram(alpha = 0.4, position = "identity") +
geom_rug(aes(x = LD1)) +
theme_tufte() +
scale_fill_ptol() +
scale_color_ptol()
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
projection %>%
mutate(IsGeo = data_scaled$IsGeo) %>%
ggplot(aes(x = LD1, fill = IsGeo)) +
geom_histogram(alpha = 0.4, position = "identity") +
geom_rug(aes(x = LD1, color = IsGeo)) +
theme_tufte() +
scale_fill_ptol() +
scale_color_ptol()
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
projection %>%
mutate(IsGeo = data_scaled$IsGeo) %>%
ggplot(aes(x = LD1, fill = IsGeo)) +
geom_histogram(alpha = 0.4, position = "identity") +
geom_rug(aes(x = LD1, color = IsGeo), show.legend = FALSE) +
theme_tufte() +
scale_fill_ptol() +
scale_color_ptol()
wine.projection <- cbind(scale(as.matrix(data_scaled),
scale = FALSE)) %*% geo_lda$scaling
wine.projection <- cbind(scale(as.matrix(data_scaled[, -9]),
scale = FALSE)) %*% geo_lda$scaling
wine.projection
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
projection %>%
mutate(IsGeo = data_scaled$IsGeo) %>%
ggplot(aes(x = LD1, fill = IsGeo)) +
geom_histogram(alpha = 0.4, position = "identity") +
geom_rug(aes(x = LD1, color = IsGeo), show.legend = FALSE) +
geom_vline() +
theme_tufte() +
scale_fill_ptol() +
scale_color_ptol() +
labs(x = "LD1. Retained all variance", y = "Frequency",
title = "Fitted values in the Linear Discriminant Space")
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
projection %>%
mutate(IsGeo = data_scaled$IsGeo) %>%
ggplot(aes(x = LD1, fill = IsGeo)) +
geom_histogram(alpha = 0.4, position = "identity") +
geom_rug(aes(x = LD1, color = IsGeo), show.legend = FALSE) +
geom_vline(xintercept = 0, lty = 2, color = "grey30") +
theme_tufte() +
scale_fill_ptol() +
scale_color_ptol() +
labs(x = "LD1. Retained all variance", y = "Frequency",
title = "Fitted values in the Linear Discriminant Space")
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
pred_lda <- predict(geo_lda, newdata = geo_lda)
# prop.lda <- geo_lda$svd^2 / sum(geo_lda$svd^2)
pred_lda <- predict(geo_lda, newdata = data_scaled)
projection %>%
mutate(IsGeo = data_scaled$IsGeo) %>%
ggplot(aes(x = LD1, fill = IsGeo)) +
geom_histogram(alpha = 0.4, position = "identity") +
geom_rug(aes(x = LD1, color = IsGeo), show.legend = FALSE) +
geom_vline(xintercept = 0, lty = 2, color = "grey30") +
theme_tufte() +
scale_fill_ptol() +
scale_color_ptol() +
labs(x = "LD1. Retained all variance", y = "Frequency",
title = "Fitted values in the Linear Discriminant Space")
projection %>%
mutate(IsGeo = data_scaled$IsGeo) %>%
ggplot(aes(x = LD1, fill = IsGeo)) +
geom_histogram(alpha = 0.4, position = "identity") +
geom_rug(aes(x = LD1, color = IsGeo), show.legend = FALSE) +
theme_tufte() +
scale_fill_ptol() +
scale_color_ptol() +
labs(x = "LD1. Retained all variance", y = "Frequency",
title = "Fitted values in the Linear Discriminant Space")
pred_lda
table(pred_lda$class == data_scaled$IsGeo) /  nrow(data_scaled)
table(pred_lda$class, data_scaled$IsGeo) /  nrow(data_scaled)
install.packages("pROC")
library(pROC)
pred_lda$class
rior
pred_lda$posterior
roc(response = data_scaled$IsGeo, predictor = pred_lda$posterior$`1`)
roc(response = data_scaled$IsGeo, predictor = pred_lda$posterior[, 2])
roc(response = data_scaled$IsGeo, predictor = pred_lda$posterior[, 2], positive = "1")
roc_lda <- roc(response = data_scaled$IsGeo, predictor = pred_lda$posterior[, 2], positive = "1")
data.frame(
sens = roc_lda$sensitivities,
spec = roc_lda$specificities,
tau  = roc_lda$thresholds)
sensitivity = roc_lda$sensitivities,
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_line() +
theme_tufte()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_line() +
theme_tufte() +
scale_x_reverse()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_line() +
theme_tufte()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_step() +
theme_tufte() +
scale_x_reverse()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_step() +
theme_tufte() +
scale_x_reverse(limits = c(0, 1))
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_step() +
theme_tufte() +
scale_x_reverse()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds)
theme_tufte() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_step() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
unique() %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_step() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
unique() %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_step() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
mutate(specificity = 1 - specificity) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_step() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_step() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_point() + #geom_step() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_point() + #geom_step() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_point() +
geom_step() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_point() +
geom_line() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_point() +
geom_step() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_point() +
geom_path() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_path() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_tufte() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_path() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_minimal() +
scale_x_reverse() +
coord_equal()
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_path() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_minimal() +
scale_x_reverse() +
coord_equal() +
labs(x = "Specificity", y = "Sensitivity", title = "ROC Curve")
auc(pred_lda$class, data_scaled$IsGeo)
auc(roc_lda)
table(pred_lda$class, data_scaled$IsGeo) /  nrow(data_scaled)
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds)
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity)) +
geom_path() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_minimal() +
scale_x_reverse() +
coord_equal() +
labs(x = "Specificity", y = "Sensitivity", title = "ROC Curve")
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity, color = tau)) +
geom_path() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_minimal() +
scale_x_reverse() +
coord_equal() +
labs(x = "Specificity", y = "Sensitivity", title = "ROC Curve")
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity, color = tau)) +
geom_path() +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_minimal() +
scale_x_reverse() +
coord_equal() +
labs(x = "Specificity", y = "Sensitivity", title = "ROC Curve") +
scale_color_gradient2(low = "darkred", mid = "seagreen4",
high = "darkblue", midpoint = 0.5)
data.frame(sensitivity = roc_lda$sensitivities,
specificity = roc_lda$specificities,
tau  = roc_lda$thresholds) %>%
ggplot(aes(x = specificity, y = sensitivity, color = tau)) +
geom_path(size = 1) +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0), lty = 2, color = "grey30") +
theme_minimal() +
scale_x_reverse() +
coord_equal() +
labs(x = "Specificity", y = "Sensitivity", title = "ROC Curve") +
scale_color_gradient2(low = "darkred", mid = "seagreen4",
high = "darkblue", midpoint = 0.5)
library(boot)
lda_boot <- function(data, indices) {
df <- data[indices, ]
fit <- lda(IsGeo ~ ., data = df)
pred_lda <- predict(fit, newdata = df)
roc_lda <- roc(
response = df$IsGeo,
predictor = pred_lda$posterior[, 2], positive = "1")
return(auc(roc_lda))
}
boot_fit <- boot(
data = data_scaled,
statistic = lda_boot,
R = 200
)
boot_fit
boot_fit$t
data.frame(auc = boot_fit$t)
data.frame(auc = boot_fit$t) %>%
ggplot(aes(x = auc)) +
geom_histogram() +
theme_tufte()
hist(boot_fit$t)
hist(boot_fit$t, x = "AUC", main = "Bootstrap distribution of AUC")
boot_fit <- boot(
data = data_scaled,
statistic = lda_boot,
R = 2000
)
hist(boot_fit$t, x = "AUC", main = "Bootstrap distribution of AUC")
boot_fit$t
hist(boot_fit$t[, 1], x = "AUC", main = "Bootstrap distribution of AUC")
hist(boot_fit$t,  xlab = "AUC", main = "Bootstrap distribution of AUC")
hist(boot_fit$t,  xlab = "AUC", main = "Bootstrap distribution of AUC",
col = "wheat")
hist(boot_fit$t,  xlab = "AUC", main = "Bootstrap distribution of AUC",
col = "wheat", border = "grey40")
hist(boot_fit$t,  xlab = "AUC", main = "Bootstrap distribution of AUC",
col = "wheat", border = "grey40", breaks = 60)
hist(boot_fit$t,  xlab = "AUC", main = "Bootstrap distribution of AUC",
col = "wheat", border = "grey40", breaks = 50)
hist(boot_fit$t,  xlab = "AUC", main = "Bootstrap distribution of AUC",
col = "wheat", border = "grey40", breaks = 50)
abline(v = mean(boot_fit$t), lty = 2, col = "darkred")
hist(boot_fit$t,  xlab = "AUC", main = "Bootstrap distribution of AUC",
col = "wheat", border = "grey40", breaks = 50)
abline(v = mean(boot_fit$t), lty = 2, col = "darkred", lwd = 2)
mean(boot_fit$t)
hist(boot_fit$t,  xlab = "AUC",
main = paste0("Bootstrap distribution of AUC (m=", mean(boot_fit$t),")"),
col = "wheat", border = "grey40", breaks = 50)
abline(v = mean(boot_fit$t), lty = 2, col = "darkred", lwd = 2)
hist(boot_fit$t,  xlab = "AUC",
main = paste0("Bootstrap distribution of AUC (m=",
round(mean(boot_fit$t), 3),")"),
col = "wheat", border = "grey40", breaks = 50)
hist(boot_fit$t,  xlab = "AUC",
main = paste0("Bootstrap distribution of AUC (m=",
round(mean(boot_fit$t), 3),")"),
col = "wheat", border = "grey40", breaks = 50)
abline(v = mean(boot_fit$t), lty = 2, col = "darkred", lwd = 2)
lr_boot <- function(data, indices) {
fit <- glm(IsGeo ~, data = data[indices, ], family = "binomial")
lr_boot <- function(data, indices) {
fit <- glm(IsGeo ~, data = data[indices, ], family = "binomial")
lr_boot <- function(data, indices) {
fit <- glm(IsGeo ~ ., data = data[indices, ], family = "binomial")
roc_lr <- roc(
response = data[indices, ]$IsGeo,
predictor = fit$fitted.values,
positive = "1"
)
return(list(coef = coef(fit), auc = auc(roc_lr)))
}
boot_lr <-  boot(
data = data_scaled,
statistic = lr_boot,
R = 1000
)
boot_lr <-  boot(
data = data_scaled,
statistic = lr_boot,
R = 10
)
model_lr <- glm(IsGeo ~ ., data = data, family = "binomial")
model_lr <- glm(IsGeo ~ ., data = data_scaled, family = "binomial")
summary(model_lr)
lr_boot <- function(data, indices) {
try(
fit <- glm(IsGeo ~ ., data = data[indices, ], family = "binomial")
roc_lr <- roc(
lr_boot <- function(data, indices) {
try(
fit <- glm(IsGeo ~ ., data = data[indices, ], family = "binomial")
roc_lr <- roc(
lr_boot <- function(data, indices) {
try(
fit <- glm(IsGeo ~ ., data = data[indices, ], family = "binomial")
roc_lr <- roc(
lr_boot <- function(data, indices) {
try({
fit <- glm(IsGeo ~ ., data = data[indices, ], family = "binomial")
roc_lr <- roc(
response = data[indices, ]$IsGeo,
predictor = fit$fitted.values,
positive = "1"
)
})
return(list(coef = coef(fit), auc = auc(roc_lr)))
}
boot_lr <-  boot(
data = data_scaled,
statistic = lr_boot,
R = 10
)
boot_lr <-  boot(
data = data_scaled,
statistic = lr_boot,
R = 10
)
coef <- data.frame(0, nrow = 100, ncol = 9)
perf <- data.frame(0, nrow = 100, ncol = 1)
perf <- rep(0, 100)
length(perf)
for (i in 1:100) {
try({
idx <- sample(1:nrow(data_scaled), size = nrow(data_scaled), replace = TRUE)
res <- lr_boot(data_scaled, indiced = idx)
})
coef[i, ] <- res$coef
perf <- res$auc
}
for (i in 1:100) {
res <- NA
try({
idx <- sample(1:nrow(data_scaled), size = nrow(data_scaled), replace = TRUE)
res <- lr_boot(data_scaled, indiced = idx)
})
coef[i, ] <- res$coef
perf[i]   <- res$auc
}
for (i in 1:100) {
res <- NA
try({
idx <- sample(1:nrow(data_scaled), size = nrow(data_scaled), replace = TRUE)
res <- lr_boot(data_scaled, indices = idx)
})
coef[i, ] <- res$coef
perf[i]   <- res$auc
}
coef
coef <- matrix(0, nrow = 100, ncol = 9) %>% as.data.frame()
perf <- rep(0, 100)
for (i in 1:100) {
res <- NA
try({
idx <- sample(1:nrow(data_scaled), size = nrow(data_scaled), replace = TRUE)
res <- lr_boot(data_scaled, indices = idx)
})
coef[i, ] <- res$coef
perf[i]   <- res$auc
}
coef
